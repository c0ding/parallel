initSidebarItems({"enum":[["Call","Contains one variant per dispatchable that can be called by an extrinsic."],["Error","Custom dispatch errors of this pallet."],["Event","The event emitted by this pallet."]],"struct":[["GenesisConfig","Can be used to configure the genesis state of this pallet."],["Pallet","The pallet implementing the on-chain logic."],["_GeneratedPrefixForStorageExchangeRate",""],["_GeneratedPrefixForStorageInsurancePool",""],["_GeneratedPrefixForStorageLiquidCurrency",""],["_GeneratedPrefixForStorageMatchingPool",""],["_GeneratedPrefixForStorageReserveFactor",""],["_GeneratedPrefixForStorageStakingCurrency",""],["_GeneratedPrefixForStorageStakingPoolCapacity",""],["_GeneratedPrefixForStorageUnstakeQueue",""]],"trait":[["Config","Configuration trait of this pallet."]],"type":[["AccountIdOf",""],["AssetIdOf",""],["BalanceOf",""],["ExchangeRate","The exchange rate between relaychain native asset and the voucher."],["InsurancePool","Total amount of charged assets to be used as xcm fees."],["LiquidCurrency","Liquid currency asset id"],["MatchingPool","Store total stake amount and unstake amount in each era, And will update when stake/unstake occurred."],["Module","Type alias to `Pallet`, to be used by `construct_runtime`."],["ReserveFactor","Fraction of reward currently set aside for reserves."],["StakingCurrency","Staking currency asset id"],["StakingPoolCapacity","Staking pool capacity"],["UnstakeQueue","Manage which we should pay off to."]]});